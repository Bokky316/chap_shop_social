plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.6'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.javalab'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// spring-boot-starter-jpa : JPA를 사용하기 위한 의존성 추가
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	// 타임리프 레이아웃 구성 의존성(Thymeleaf Layout Dialect)
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.2.1'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// 롬복 의존성 추가
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	// Test Case 에서 롬복 사용
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	// MariaDB 의존성 org.mariadb.jdbc/mariadb-java-client
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	// SQL 로그 의존성
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

	// querydsl 라이브러리 추가
	// QueryDSL의 핵심 기능을 제공합니다.
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	// QueryDSL의 어노테이션 프로세서를 사용하여 Q-Type 클래스를 생성합니다.
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	// Jakarta EE 어노테이션을 사용하기 위해 필요합니다.
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	// JPA 관련 어노테이션과 인터페이스를 제공합니다.
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Spring Security
	// 스프링 시큐리티를 사용하기 위한 의존성 추가
	implementation 'org.springframework.boot:spring-boot-starter-security:3.3.6'
	// 타임리프에서 시큐리티 사용, 타임리프 페이지에서 시큐리티 정보를 이용해서 페이지를 선택적으로 렌더링할 수 있습니다.
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.2.RELEASE'
	// Spring Security를 사용한 컨트롤러 테스트에서 인증 및 권한 테스트를 지원합니다.
	// 이를 통해 실제 인증 메커니즘을 테스트할 필요 없이 가상의 인증 정보를 제공하여 테스트를 작성할 수 있습니다.
	testImplementation 'org.springframework.security:spring-security-test'

	// Validation, Hibernate Validator, Jakarta Validation API, 사용자가 입력한 데이터의 유효성을 검증하는 기능을 제공합니다.
	//implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
	//implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
	// 위의 두 의존성을 모두 포함하는 밸리데이션 의존성
	implementation 'org.springframework.boot:spring-boot-starter-validation:3.4.0'

	// modelmapper Dto To Entity 변환작업을 해주는 클래스
	implementation 'org.modelmapper:modelmapper:3.2.0'

	// 소셜 로그인(oauth2 client)
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
}

tasks.named('test') {
	useJUnitPlatform()
}

/**
 * QueryDSL 설정
 * - QueryDSL 어노테이션 프로세서를 사용하여 Q타입 클래스를 생성합니다.
 * - QueryDSL 어노테이션 프로세서가 생성하는 Q타입 클래스들이 저장될 위치를 설정합니다.
 * - src/main/generated 폴더에 Q타입 클래스들이 생성됩니다.
 * - clean 작업을 수행하면 src/main/generated 폴더가 삭제됩니다.
 */
def querydslSrcDir = 'src/main/generated'
clean {
	delete file(querydslSrcDir)
}
// QueryDSL 어노테이션 프로세서가 생성하는 Q타입 클래스들이 저장될 위치 설정.
tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}