# Spring Application 기본 설정
spring.application.name=chap04_jpa_security
server.port=8080

# 데이터베이스 연결 정보
spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.url=jdbc:log4jdbc:mariadb://shop-database.cnu04wcma2hv.ap-southeast-2.rds.amazonaws.com:3306/shop_social?serverTimezone=UTC&characterEncoding=UTF-8
# spring.datasource.url=jdbc:log4jdbc:mariadb://localhost:3306/shop_social?serverTimezone=UTC&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=12345678

# JPA 설정
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MariaDBDialect

# SQL 쿼리 출력
logging.level.jdbc.sqlonly=debug
# SQL 실행 시간 출력
logging.level.jdbc.sqltiming=off
# ResultSet 출력 비활성화
logging.level.jdbc.resultset=off
# 감사 로그 비활성화
logging.level.jdbc.audit=off
# Connection 로그 비활성화
logging.level.jdbc.connection=off

# Hibernate SQL 로그 설정 (log4jdbc 사용으로 인해 불필요하여 비활성화)
spring.jpa.properties.hibernate.show_sql=false
spring.jpa.properties.hibernate.format_sql=false
logging.level.org.hibernate.type.descriptor.sql=off

# Thymeleaf 설정
# Thymeleaf 캐시 비활성화
spring.thymeleaf.cache=false

# DevTools 설정
spring.devtools.livereload.enabled=true
spring.devtools.restart.enabled=true

# 로그 레벨 설정
# 루트 레벨 로그 설정
logging.level.root=INFO
logging.level.org.springframework=INFO
logging.level.org.springframework.web=DEBUG
# 시큐리티 로그, 시큐리티 디버깅시 사용
logging.level.org.springframework.security=DEBUG
logging.level.com.javalab.shop=DEBUG

# log display format
logging.pattern.level=%highlight(%-5level)
spring.output.ansi.enabled=ALWAYS

# 상품 이미지 업로드 경로, 이 값은 애플리케이션에서 상품 이미지를 저장하거나 읽어올 때 참조하는 경로
# Windows의 로컬 파일 시스템 경로로, C 드라이브의 shop 디렉터리 내 item 하위 디렉터리를 가리킵니다.
# 상품 등록 시 이미지를 해당 경로에 저장하거나, 프론트엔드에 표시할 이미지를 해당 경로에서 로드.
# itemImgLocation=c:/shop/item
itemImgLocation=/home/ec2-user/shop/chap05_shop_social/build/libs/upload/item
# 리소스(이미지/파일 등)를 웹 애플리케이션에서 접근 가능하도록 제공하는 URL 기반 경로
# 타임리프나 프론트엔드에서 이미지를 로드할 때 URL을 통해 파일을 참조.
#uploadPath=file:///c:/shop/
uploadPath=file:///home/ec2-user/shop/chap05_shop_social/build/libs/upload/


spring.servlet.multipart.max-request-size=100MB
spring.servlet.multipart.max-file-size=20MB

#com.javalab.boot.upload.path=C:\\upload
# 파일이 업로드 되어 있는 경로

# 기본 batch size 설정, 주문이 5건이면 일반적으로 5번의 주문 아이템에 대한 조회 쿼리가 발생합니다.
# 이때 batch size를 1000으로 설정하면 5번의 조회 쿼리 대신 1번의 조회 쿼리로 처리할 수 있습니다.
# 이렇게 설정하면 성능이 향상됩니다. 예를들면 in 쿼리로 처리됩니다. in (1,2,3,4,5)
spring.jpa.properties.hibernate.default_batch_fetch_size=10


## kakao social login 사용자를 카카오 인증 서버로 리다이렉트하기 위한 초기 단계를 구성 ##
# 1. 사용자가 우리 로그인 페이지에서 <a href="/oauth2/authorization/kakao">KAKAO</a> 클릭
# 2. 스프링 시큐리티 OAuth2 가 1.번 요청을 가로채서 사용자를 카카오의 인증 URI로 설정된
#   https://kauth.kakao.com/oauth/authorize로 리디렉트 시킨다.
# 3. 카카오는 다시 사용자의 카카오 소셜 로그인 인증 여부에 따라서 사용자를
#    https://accounts.kakao.com/login 페이지로 리디렉트 시킨다. 만약 카카오 소셜로그인 인증이
#    이미 있는 경우에는 바로 인가코드를 우리 서버로 전달한다.
# 4. 사용자가 카카오 소셜로그인 화면에서 아이디와 비밀번호를 입력하고 로그인 버튼을 누르면
#   우리 서버와 카카오 서버간의 인증 절차가 시작된다.
# 4.1. 카카오 인증 서버는 우리 앱에 설정한 client-id를 확인하고 인가코드를 전달해준다.
#   인가코드는 우리가 설정해놓은 Redirect Url(http://localhost:8080/login/oauth2/code/kakao)로 전달된다.
# 4.2. 4.1.에서 받은 인가코드와 우리가 설정해놓은 client-secret 키를 카카오의 인증서버인
#   https://kauth.kakao.com/oauth/token 에 액세스 토큰을 요청하고 카카오 인증 서버가 액세스 토큰을 반환.
# 5. Spring Security가 액세스 토큰을 사용해 https://kapi.kakao.com/v2/user/me에서 사용자 정보를 요청.
# 6. 사용자 정보를 가져와 인증 객체 생성 및 스프링 컨텍스트에 저장.
# 7. 사용자가 로그인 후 리디렉션 설정에 따라 적절한 페이지로 이동
# 카카오는 스프링 시큐리티에게 인증 코드를 전달한다.
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.user-name-attribute=id
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.registration.kakao.client-name=kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code

## 카카오 소셜 로그인
# 1. 소셜 로그인 로컬 서버 - 로그인 성공후 "인가코드"가 리디렉션될 주소(카카오 소셜 로그인을 로컬에서 사용)
spring.security.oauth2.client.registration.kakao.redirect_uri=http://localhost:8080/login/oauth2/code/kakao
# 2. 소셜 로그인(클라우드타입 배포시 사용)
#spring.security.oauth2.client.registration.kakao.redirect_uri=https://port-0-chap10-shopping-static-7xwyjq992lliwmu004.sel4.cloudtype.app/login/oauth2/code/kakao
#3. 소셜 로그인(AWS 배포시 사용)
#spring.security.oauth2.client.registration.kakao.redirect_uri=http://ec2-54-219-185-240.us-west-1.compute.amazonaws.com:8080/login/oauth2/code/kakao

# REST API 키(인가 코드 발급시 필요)
spring.security.oauth2.client.registration.kakao.client-id=f57be72d3c49af75d43b0fefd1ce8235
# 인가코드와 이 비밀키를 이옹해서 액세스 토큰을 발급받는다. 액세스 토큰이 있어야 카카오 사용자 정보 조회 가능
spring.security.oauth2.client.registration.kakao.client-secret=hn6bBKP7z0MjGFWudXTeHWLbgbMZPc9s
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,account_email

